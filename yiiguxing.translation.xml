<application>
  <component name="AppStorage">
    <histories>
      <item value="sqrt" />
      <item value="hypot" />
      <item value="as cached in the local repository, resolution will not be reattempted until the update interval of alimaven has elapsed or updates are forced" />
      <item value="protocol" />
      <item value="Feature that determines whether JSON floating point numbers * are to be deserialized into {@link java.math.BigDecimal}s * if only generic type description (either {@link Object} or * {@link Number}, or within untyped {@link java.util.Map} * or {@link java.util.Collection} context) is available. * If enabled such values will be deserialized as {@link java.math.BigDecimal}s; * if disabled, will be deserialized as {@link Double}s. * &lt;p&gt; * Feature is disabled by default, meaning that &quot;untyped&quot; floating * point numbers will by default be deserialized as {@link Double}s * (choice is for performance reason -- BigDecimals are slower than * Doubles). */" />
      <item value="/** * A qualifier value for the specified asynchronous operation(s). * &lt;p&gt;May be used to determine the target executor to be used when executing this * method, matching the qualifier value (or the bean name) of a specific * {@link java.util.concurrent.Executor Executor} or * {@link org.springframework.core.task.TaskExecutor TaskExecutor} * bean definition. * &lt;p&gt;When specified on a class level {@code @Async} annotation, indicates that the * given executor should be used for all methods within the class. Method level use * of {@code Async#value} always overrides any value set at the class level. * @since 3.1.2 */" />
      <item value="* Determines how two dates compare up to no more than the specified * most significant field." />
      <item value="/** * Determines how two calendars compare up to no more than the specified * most significant field. * * @param cal1 the first calendar, not &lt;code&gt;null&lt;/code&gt; * @param cal2 the second calendar, not &lt;code&gt;null&lt;/code&gt; * @param field the field from {@code Calendar} * @return a negative integer, zero, or a positive integer as the first * calendar is less than, equal to, or greater than the second. * @throws IllegalArgumentException if any argument is &lt;code&gt;null&lt;/code&gt; * @see #truncate(Calendar, int) * @see #truncatedCompareTo(Date, Date, int) * @since 3.0" />
      <item value="renewed In Advance" />
      <item value="employee" />
      <item value="资方" />
      <item value="Customer Record" />
      <item value="nine" />
      <item value="Alphabetic" />
      <item value="The destination list." />
      <item value="cacl" />
      <item value="Suspending" />
      <item value="体温" />
      <item value="* A qualifier value for the specified asynchronous operation(s). * &lt;p&gt;May be used to determine the target executor to be used when executing this * method, matching the qualifier value (or the bean name) of a specific * {@link java.util.concurrent.Executor Executor} or * {@link org.springframework.core.task.TaskExecutor TaskExecutor} * bean definition. * &lt;p&gt;When specified on a class level {@code @Async} annotation, indicates that the * given executor should be used for all methods within the class. Method level use * of {@code Async#value} always overrides any value set at the class level. * @since 3.1.2 */" />
      <item value="Sorts the specified range of the specified array of objects into * ascending order, according to the * {@linkplain Comparable natural ordering} of its * elements. The range to be sorted extends from index * {@code fromIndex}, inclusive, to index {@code toIndex}, exclusive. * (If {@code fromIndex==toIndex}, the range to be sorted is empty.) All * elements in this range must implement the {@link Comparable} * interface. Furthermore, all elements in this range must be &lt;i&gt;mutually * comparable&lt;/i&gt; (that is, {@code e1.compareTo(e2)} must not throw a * {@code ClassCastException} for any elements {@code e1} and * {@code e2} in the array)." />
      <item value="比赛" />
      <item value="examine" />
      <item value="Dossier" />
      <item value="part" />
      <item value="whether to break scope restrictions using the * {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)} method. {@code false} will only * match {@code public} fields." />
      <item value="grade" />
      <item value="expanded" />
      <item value="Returns an estimate of the number of bytes that can be read (or * skipped over) from this input stream without blocking by the next * invocation of a method for this input stream. The next invocation * might be the same thread or another thread. A single read or skip of this * many bytes will not block, but may read or skip fewer bytes. * * &lt;p&gt; Note that while some implementations of {@code InputStream} will return * the total number of bytes in the stream, many will not. It is * never correct to use the return value of this method to allocate * a buffer intended to hold all data in this stream. * * &lt;p&gt; A subclass' implementation of this method may choose to throw an * {@link IOException} if this input stream has been closed by * invoking the {@link #close()} method. * * &lt;p&gt; The {@code available} method for class {@code InputStream} always * returns {@code 0}. * * &lt;p&gt; This method should be overridden by subclasses. * * @return an estimate of the number of bytes that can be read (or skipped * over) from this input stream without blocking or {@code 0} when * it reaches the end of the input stream. * @exception IOException if an I/O error occurs." />
      <item value="* Equivalent to {@link #Template(String, Reader, Configuration) * Template(name, reader, null)}. * * @deprecated This constructor uses the &quot;default&quot; {@link Configuration} * instance, which can easily lead to erroneous, unpredictable behavior. * See more {@link Configuration#getDefaultConfiguration() here...}. */" />
      <item value="Exclude specific auto-configuration classes such that they will never be applied." />
      <item value="/** * Annotation for externalized configuration. Add this to a class definition or a * {@code @Bean} method in a {@code @Configuration} class if you want to bind and validate * some external Properties (e.g. from a .properties file). * &lt;p&gt; * Note that contrary to {@code @Value}, SpEL expressions are not evaluated since property * values are externalized. * * @author Dave Syer" />
      <item value="/** * Feature allows the support for &quot;missing&quot; values in a JSON array: missing * value meaning sequence of two commas, without value in-between but only * optional white space. * Enabling this feature will expose &quot;missing&quot; values as {@link JsonToken#VALUE_NULL} * tokens, which typically become Java nulls in arrays and {@link java.util.Collection} * in data-binding. * &lt;p&gt; * For example, enabling this feature will represent a JSON array &lt;code&gt;[&quot;value1&quot;,,&quot;value3&quot;,]&lt;/code&gt; * as &lt;code&gt;[&quot;value1&quot;, null, &quot;value3&quot;, null]&lt;/code&gt; * &lt;p&gt; * Since the JSON specification does not allow missing values this is a non-compliant JSON * feature and is disabled by default. * * @since 2.8 */" />
      <item value="/** * Feature that allows parser to recognize set of * &quot;Not-a-Number&quot; (NaN) tokens as legal floating number * values (similar to how many other data formats and * programming language source code allows it). * Specific subset contains values that * &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/&quot;&gt;XML Schema&lt;/a&gt; * (see section 3.2.4.1, Lexical Representation) * allows (tokens are quoted contents, not including quotes): *&lt;ul&gt; * &lt;li&gt;&quot;INF&quot; (for positive infinity), as well as alias of &quot;Infinity&quot; * &lt;li&gt;&quot;-INF&quot; (for negative infinity), alias &quot;-Infinity&quot; * &lt;li&gt;&quot;NaN&quot; (for other not-a-numbers, like result of division by zero) *&lt;/ul&gt; *&lt;p&gt; * Since JSON specification does not allow use of such values, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="* Feature that determines whether parser will allow * JSON integral numbers to start with additional (ignorable) * zeroes (like: 000001). If enabled, no exception is thrown, and extra * nulls are silently ignored (and not included in textual representation * exposed via {@link JsonParser#getText}). *&lt;p&gt; * Since JSON specification does not allow leading zeroes, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="/** * Feature that can be enabled to accept quoting of all character * using backslash quoting mechanism: if not enabled, only characters * that are explicitly listed by JSON specification can be thus * escaped (see JSON spec for small list of these characters) *&lt;p&gt; * Since JSON specification requires quoting for all control characters, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="* Feature that can be enabled to accept quoting of all character * using backslash quoting mechanism: if not enabled, only characters * that are explicitly listed by JSON specification can be thus * escaped (see JSON spec for small list of these characters) *&lt;p&gt; * Since JSON specification requires quoting for all control characters, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="* Feature that determines whether parser will allow * JSON Strings to contain unquoted control characters * (ASCII characters with value less than 32, including * tab and line feed characters) or not. * If feature is set false, an exception is thrown if such a * character is encountered. *&lt;p&gt; * Since JSON specification requires quoting for all control characters, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="/** * Feature that determines whether parser will allow * JSON Strings to contain unquoted control characters * (ASCII characters with value less than 32, including * tab and line feed characters) or not. * If feature is set false, an exception is thrown if such a * character is encountered. *&lt;p&gt; * Since JSON specification requires quoting for all control characters, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="* Feature that determines whether parser will allow use * of single quotes (apostrophe, character '\'') for * quoting Strings (names and String values). If so, * this is in addition to other acceptable markers. * but not by JSON specification). *&lt;p&gt; * Since JSON specification requires use of double quotes for * field names, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="* Feature that determines whether parser will allow use * of unquoted field names (which is allowed by Javascript, * but not by JSON specification). *&lt;p&gt; * Since JSON specification requires use of double quotes for * field names, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="/** * Feature that determines whether parser will allow use * of unquoted field names (which is allowed by Javascript, * but not by JSON specification). *&lt;p&gt; * Since JSON specification requires use of double quotes for * field names, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="/** * Feature that determines whether parser will allow use * of YAML comments, ones starting with '#' and continuing * until the end of the line. This commenting style is common * with scripting languages as well. *&lt;p&gt; * Since JSON specification does not mention comments as legal * construct, * this is a non-standard feature. As such, feature is * &lt;b&gt;disabled by default&lt;/b&gt; for parsers and must be * explicitly enabled." />
      <item value="* Feature that determines whether parser will allow use * of Java/C++ style comments (both '/'+'*' and * '//' varieties) within parsed content or not. *&lt;p&gt; * Since JSON specification does not mention comments as legal * construct, * this is a non-standard feature; however, in the wild * this is extensively used. As such, feature is * &lt;b&gt;disabled by default&lt;/b&gt; for parsers and must be * explicitly enabled." />
      <item value="* Feature that determines whether parser will automatically * close underlying input source that is NOT owned by the * parser. If disabled, calling application has to separately * close the underlying {@link InputStream} and {@link Reader} * instances used to create the parser. If enabled, parser * will handle closing, as long as parser itself gets closed: * this happens when end-of-input is encountered, or parser * is closed by a call to {@link JsonParser#close}. *&lt;p&gt; * Feature is enabled by default." />
      <item value="has to be escaped using backslash to be included in name" />
      <item value="Customer" />
      <item value="Custom" />
      <item value=" double-quote" />
      <item value="Add the given flash attribute." />
      <item value="/** * Wraps the parameter object to {@link TemplateModel} interface(s). Simple types like numbers, strings, booleans * and dates will be wrapped into the corresponding {@code SimpleXxx} classes (like {@link SimpleNumber}). * {@link Map}-s, {@link List}-s, other {@link Collection}-s, arrays and {@link Iterator}-s will be wrapped into the * corresponding {@code SimpleXxx} or {@code DefaultXxxAdapter} classes (like {@link SimpleHash} or * {@link DefaultMapAdapter}), depending on {@link #getUseAdaptersForContainers()} and * {@link #getForceLegacyNonListCollections()}. After that, the wrapping is handled by * {@link #handleUnknownType(Object)}, so see more there. */" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="46" />
        <entry key="ENGLISH" value="47" />
        <entry key="FRENCH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>