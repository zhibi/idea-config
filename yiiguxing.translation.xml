<application>
  <component name="AppStorage">
    <histories>
      <item value="* Value that means that default typing will be used for * all non-final types, with exception of small number of * &quot;natural&quot; types (String, Boolean, Integer, Double), which * can be correctly inferred from JSON; as well as for * all arrays of non-final types. *&lt;p&gt; * Since 2.4, this does NOT apply to {@link TreeNode} and its subtypes. */" />
      <item value="/** * Enumeration for possible visibility thresholds (minimum visibility) * that can be used to limit which methods (and fields) are * auto-detected. */" />
      <item value="* A marker interface for &lt;code&gt;{@link org.quartz.JobDetail}&lt;/code&gt; s that * wish to have their state maintained between executions. * &lt;/p&gt; * * &lt;p&gt; * &lt;code&gt;StatefulJob&lt;/code&gt; instances follow slightly different rules from * regular &lt;code&gt;Job&lt;/code&gt; instances. The key difference is that their * associated &lt;code&gt;{@link JobDataMap}&lt;/code&gt; is re-persisted after every * execution of the job, thus preserving state for the next execution. The * other difference is that stateful jobs are not allowed to execute * concurrently, which means new triggers that occur before the completion of * the &lt;code&gt;execute(xx)&lt;/code&gt; method will be delayed. * &lt;/p&gt;" />
      <item value="Correct the classpath of your application so that it contains a single, compatible version of org.springframework.security.authentication.dao.DaoAuthenticationProvider" />
      <item value="* Enable support for {@link ConfigurationProperties} annotated beans. * {@link ConfigurationProperties} beans can be registered in the standard way (for * example using {@link Bean @Bean} methods) or, for convenience, can be specified * directly on this annotation." />
      <item value="* Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with * {@link org.junit.Test} that are also annotated with &lt;code&gt;&amp;#064;Ignore&lt;/code&gt; will not be executed as tests. * Also, you can annotate a class containing test methods with &lt;code&gt;&amp;#064;Ignore&lt;/code&gt; and none of the containing * tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the * number of tests that ran and the number of tests that failed. * * &lt;p&gt;For example: * &lt;pre&gt; * &amp;#064;Ignore &amp;#064;Test public void something() { ... * &lt;/pre&gt; * &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored: * &lt;pre&gt; * &amp;#064;Ignore(&quot;not ready yet&quot;) &amp;#064;Test public void something() { ... * &lt;/pre&gt; * &amp;#064;Ignore can also be applied to the test class: * &lt;pre&gt; * &amp;#064;Ignore public class IgnoreMe { * &amp;#064;Test public void test1() { ... } * &amp;#064;Test public void test2() { ... } * } * &lt;/pre&gt; * * @since 4.0" />
      <item value="unified Order" />
      <item value="MILLISECONDS" />
      <item value="/** * Set {@code key} to hold the string {@code value} if {@code key} is present. * * @param key must not be {@literal null}. * @param value must not be {@literal null}. * @return command result indicating if the key has been set. * @throws IllegalArgumentException if either {@code key} or {@code value} is not present. * @see &lt;a href=&quot;http://redis.io/commands/set&quot;&gt;Redis Documentation: SET&lt;/a&gt; * @since 2.1 */" />
      <item value="* Set {@code key} to hold the string {@code value} if {@code key} is absent. * * @param key must not be {@literal null}. * @param value must not be {@literal null}. * @return {@literal null} when used in pipeline / transaction. * @see &lt;a href=&quot;http://redis.io/commands/setnx&quot;&gt;Redis Documentation: SETNX&lt;/a&gt;" />
      <item value="Increment an integer value stored as string value under" />
      <item value="delta" />
      <item value="/** * Increment an integer value stored as string value under {@code key} by {@code delta}. * * @param key must not be {@literal null}. * @param delta * @return {@literal null} when used in pipeline / transaction. * @see &lt;a href=&quot;http://redis.io/commands/incrby&quot;&gt;Redis Documentation: INCRBY&lt;/a&gt; */" />
      <item value="optionally overwrite tags every time image is built with docker:build" />
      <item value="* Deletes the file or directory denoted by this abstract pathname. If * this pathname denotes a directory, then the directory must be empty in * order to be deleted. *" />
      <item value="Requests that the file or directory denoted by this abstract * pathname be deleted when the virtual machine terminates. * Files (or directories) are deleted in the reverse order that * they are registered. Invoking this method to delete a file or * directory that is already registered for deletion has no effect. * Deletion will be attempted only for normal termination of the * virtual machine, as defined by the Java Language Specification." />
      <item value="Requests that the file or directory denoted by this abstract * pathname be deleted when the virtual machine terminates. * Files (or directories) are deleted in the reverse order that * they are registered. Invoking this method to delete a file or * directory that is already registered for deletion has no effect. * Deletion will be attempted only for normal termination of the * virtual machine, as defined by the Java Language Specification. * * &lt;p&gt; Once deletion has been requested, it is not possible to cancel the * request. This method should therefore be used with care. *" />
      <item value="deleted when JVM exits." />
      <item value="* Consumers of the same role is required to have exactly same subscriptions and consumerGroup to correctly achieve * load balance. It's required and needs to be globally unique." />
      <item value="BROADCASTING" />
      <item value="模板" />
      <item value="formwork" />
      <item value="Schedule a file to be deleted when JVM exits. * If file is directory delete it and all sub-directories." />
      <item value="* they may contain. For example, some implementations prohibit null elements, * and some have restrictions on the types of their elements. Attempting to * add an ineligible element throws an unchecked exception, typically * &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;. Attempting * to query the presence of an ineligible element may throw an exception, * or it may simply return false; some implementations will exhibit the former * behavior and some will exhibit the latter. More generally, attempting an * operation on an ineligible element whose completion would not result in * the insertion of an ineligible element into the list may throw an * exception or it may succeed, at the option of the implementation. * Such exceptions are marked as &quot;optional&quot; in the specification for this * interface. *" />
      <item value="* &lt;p&gt;Some list implementations have restrictions on the elements that * they may contain. For example, some implementations prohibit null elements, * and some have restrictions on the types of their elements. Attempting to * add an ineligible element throws an unchecked exception, typically * &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;. Attempting * to query the presence of an ineligible element may throw an exception, * or it may simply return false; some implementations will exhibit the former * behavior and some will exhibit the latter. More generally, attempting an * operation on an ineligible element whose completion would not result in * the insertion of an ineligible element into the list may throw an * exception or it may succeed, at the option of the implementation. * Such exceptions are marked as &quot;optional&quot; in the specification for this * interface." />
      <item value="mq Contract Request Info Mapper" />
      <item value="Present" />
      <item value="nine" />
      <item value="Alphabetic" />
      <item value="The destination list." />
      <item value="cacl" />
      <item value="Suspending" />
      <item value="体温" />
      <item value="* A qualifier value for the specified asynchronous operation(s). * &lt;p&gt;May be used to determine the target executor to be used when executing this * method, matching the qualifier value (or the bean name) of a specific * {@link java.util.concurrent.Executor Executor} or * {@link org.springframework.core.task.TaskExecutor TaskExecutor} * bean definition. * &lt;p&gt;When specified on a class level {@code @Async} annotation, indicates that the * given executor should be used for all methods within the class. Method level use * of {@code Async#value} always overrides any value set at the class level. * @since 3.1.2 */" />
      <item value="Sorts the specified range of the specified array of objects into * ascending order, according to the * {@linkplain Comparable natural ordering} of its * elements. The range to be sorted extends from index * {@code fromIndex}, inclusive, to index {@code toIndex}, exclusive. * (If {@code fromIndex==toIndex}, the range to be sorted is empty.) All * elements in this range must implement the {@link Comparable} * interface. Furthermore, all elements in this range must be &lt;i&gt;mutually * comparable&lt;/i&gt; (that is, {@code e1.compareTo(e2)} must not throw a * {@code ClassCastException} for any elements {@code e1} and * {@code e2} in the array)." />
      <item value="比赛" />
      <item value="examine" />
      <item value="Dossier" />
      <item value="part" />
      <item value="whether to break scope restrictions using the * {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)} method. {@code false} will only * match {@code public} fields." />
      <item value="grade" />
      <item value="expanded" />
      <item value="Returns an estimate of the number of bytes that can be read (or * skipped over) from this input stream without blocking by the next * invocation of a method for this input stream. The next invocation * might be the same thread or another thread. A single read or skip of this * many bytes will not block, but may read or skip fewer bytes. * * &lt;p&gt; Note that while some implementations of {@code InputStream} will return * the total number of bytes in the stream, many will not. It is * never correct to use the return value of this method to allocate * a buffer intended to hold all data in this stream. * * &lt;p&gt; A subclass' implementation of this method may choose to throw an * {@link IOException} if this input stream has been closed by * invoking the {@link #close()} method. * * &lt;p&gt; The {@code available} method for class {@code InputStream} always * returns {@code 0}. * * &lt;p&gt; This method should be overridden by subclasses. * * @return an estimate of the number of bytes that can be read (or skipped * over) from this input stream without blocking or {@code 0} when * it reaches the end of the input stream. * @exception IOException if an I/O error occurs." />
      <item value="* Equivalent to {@link #Template(String, Reader, Configuration) * Template(name, reader, null)}. * * @deprecated This constructor uses the &quot;default&quot; {@link Configuration} * instance, which can easily lead to erroneous, unpredictable behavior. * See more {@link Configuration#getDefaultConfiguration() here...}. */" />
      <item value="Exclude specific auto-configuration classes such that they will never be applied." />
      <item value="/** * Annotation for externalized configuration. Add this to a class definition or a * {@code @Bean} method in a {@code @Configuration} class if you want to bind and validate * some external Properties (e.g. from a .properties file). * &lt;p&gt; * Note that contrary to {@code @Value}, SpEL expressions are not evaluated since property * values are externalized. * * @author Dave Syer" />
      <item value="/** * Feature allows the support for &quot;missing&quot; values in a JSON array: missing * value meaning sequence of two commas, without value in-between but only * optional white space. * Enabling this feature will expose &quot;missing&quot; values as {@link JsonToken#VALUE_NULL} * tokens, which typically become Java nulls in arrays and {@link java.util.Collection} * in data-binding. * &lt;p&gt; * For example, enabling this feature will represent a JSON array &lt;code&gt;[&quot;value1&quot;,,&quot;value3&quot;,]&lt;/code&gt; * as &lt;code&gt;[&quot;value1&quot;, null, &quot;value3&quot;, null]&lt;/code&gt; * &lt;p&gt; * Since the JSON specification does not allow missing values this is a non-compliant JSON * feature and is disabled by default. * * @since 2.8 */" />
      <item value="/** * Feature that allows parser to recognize set of * &quot;Not-a-Number&quot; (NaN) tokens as legal floating number * values (similar to how many other data formats and * programming language source code allows it). * Specific subset contains values that * &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/&quot;&gt;XML Schema&lt;/a&gt; * (see section 3.2.4.1, Lexical Representation) * allows (tokens are quoted contents, not including quotes): *&lt;ul&gt; * &lt;li&gt;&quot;INF&quot; (for positive infinity), as well as alias of &quot;Infinity&quot; * &lt;li&gt;&quot;-INF&quot; (for negative infinity), alias &quot;-Infinity&quot; * &lt;li&gt;&quot;NaN&quot; (for other not-a-numbers, like result of division by zero) *&lt;/ul&gt; *&lt;p&gt; * Since JSON specification does not allow use of such values, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="* Feature that determines whether parser will allow * JSON integral numbers to start with additional (ignorable) * zeroes (like: 000001). If enabled, no exception is thrown, and extra * nulls are silently ignored (and not included in textual representation * exposed via {@link JsonParser#getText}). *&lt;p&gt; * Since JSON specification does not allow leading zeroes, * this is a non-standard feature, and as such disabled by default. */" />
      <item value="/** * Feature that can be enabled to accept quoting of all character * using backslash quoting mechanism: if not enabled, only characters * that are explicitly listed by JSON specification can be thus * escaped (see JSON spec for small list of these characters) *&lt;p&gt; * Since JSON specification requires quoting for all control characters, * this is a non-standard feature, and as such disabled by default. */" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="64" />
        <entry key="ENGLISH" value="65" />
        <entry key="FRENCH" value="1" />
        <entry key="CATALAN" value="1" />
      </map>
    </option>
  </component>
</application>